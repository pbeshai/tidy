(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{76:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return u})),a.d(t,"metadata",(function(){return b})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return o}));var n=a(3),r=a(7),c=(a(0),a(97)),u={title:"Summarizer API",sidebar_label:"Summarizers"},b={unversionedId:"api/summary",id:"api/summary",isDocsHomePage:!1,title:"Summarizer API",description:"Aggregation functions that given a collection of items produce a single value.",source:"@site/docs/api/summary.md",slug:"/api/summary",permalink:"/tidy/docs/api/summary",editUrl:"https://github.com/pbeshai/tidy/docs/api/summary.md",version:"current",lastUpdatedBy:"Peter Beshai",lastUpdatedAt:1659830343,sidebar_label:"Summarizers",sidebar:"docs",previous:{title:"groupBy API",permalink:"/tidy/docs/api/groupby"},next:{title:"Vector Function API",permalink:"/tidy/docs/api/vector"}},l=[{value:"deviation",id:"deviation",children:[{value:"Parameters",id:"parameters",children:[]},{value:"Usage",id:"usage",children:[]}]},{value:"first",id:"first",children:[{value:"Parameters",id:"parameters-1",children:[]},{value:"Usage",id:"usage-1",children:[]}]},{value:"last",id:"last",children:[{value:"Parameters",id:"parameters-2",children:[]},{value:"Usage",id:"usage-2",children:[]}]},{value:"max",id:"max",children:[{value:"Parameters",id:"parameters-3",children:[]},{value:"Usage",id:"usage-3",children:[]}]},{value:"mean",id:"mean",children:[{value:"Parameters",id:"parameters-4",children:[]},{value:"Usage",id:"usage-4",children:[]}]},{value:"meanRate",id:"meanrate",children:[{value:"Parameters",id:"parameters-5",children:[]},{value:"Usage",id:"usage-5",children:[]}]},{value:"median",id:"median",children:[{value:"Parameters",id:"parameters-6",children:[]},{value:"Usage",id:"usage-6",children:[]}]},{value:"min",id:"min",children:[{value:"Parameters",id:"parameters-7",children:[]},{value:"Usage",id:"usage-7",children:[]}]},{value:"n",id:"n",children:[{value:"Parameters",id:"parameters-8",children:[]},{value:"Usage",id:"usage-8",children:[]}]},{value:"nDistinct",id:"ndistinct",children:[{value:"Parameters",id:"parameters-9",children:[]},{value:"Usage",id:"usage-9",children:[]}]},{value:"sum",id:"sum",children:[{value:"Parameters",id:"parameters-10",children:[]},{value:"Usage",id:"usage-10",children:[]}]},{value:"variance",id:"variance",children:[{value:"Parameters",id:"parameters-11",children:[]},{value:"Usage",id:"usage-11",children:[]}]}],i={toc:l};function o(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},i,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Aggregation functions that given a collection of items produce a single value."),Object(c.b)("h2",{id:"deviation"},"deviation"),Object(c.b)("p",null,"Computes the standard deviation as per ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#deviation"}),"d3-array::deviation"),"."),Object(c.b)("h3",{id:"parameters"},"Parameters"),Object(c.b)("h4",{id:"key"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object, index: number, array: object[]) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  stdev: deviation('value'),\n})\n// output:\n[{ stdev: 2.449 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"first"},"first"),Object(c.b)("p",null,"Returns the value for the specified key from first item in the collection."),Object(c.b)("h3",{id:"parameters-1"},"Parameters"),Object(c.b)("h4",{id:"key-1"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-1"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  str: first('str'),\n  value: sum('value'),\n})\n// output:\n[{ str: 'foo', value: 15 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"last"},"last"),Object(c.b)("p",null,"Returns the value for the specified key from last item in the collection."),Object(c.b)("h3",{id:"parameters-2"},"Parameters"),Object(c.b)("h4",{id:"key-2"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-2"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  str: last('str'),\n  value: sum('value'),\n})\n// output:\n[{ str: 'bar', value: 15 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"max"},"max"),Object(c.b)("p",null,"Computes the max value as per ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#max"}),"d3-array::max"),"."),Object(c.b)("h3",{id:"parameters-3"},"Parameters"),Object(c.b)("h4",{id:"key-3"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object, index: number, array: object[]) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-3"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  value: max('value'),\n})\n// output:\n[{ value: 7 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"mean"},"mean"),Object(c.b)("p",null,"Computes the mean value as per ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#mean"}),"d3-array::mean"),", using ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#fsum"}),"d3-array::fsum")," to reduce floating point errors."),Object(c.b)("h3",{id:"parameters-4"},"Parameters"),Object(c.b)("h4",{id:"key-4"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object, index: number, array: object[]) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-4"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  value: mean('value'),\n})\n// output:\n[{ value: 3 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"meanrate"},"meanRate"),Object(c.b)("p",null,"Computes the mean for fractional values by summing over the numerator and denominator individually first before dividing."),Object(c.b)("h3",{id:"parameters-5"},"Parameters"),Object(c.b)("h4",{id:"numerator"},Object(c.b)("inlineCode",{parentName:"h4"},"numerator")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object, index: number, array: object[]) => number\n")),Object(c.b)("p",null,"Either the key to compute the numerator over or an accessor function that maps a given item to the numerator value to compute over."),Object(c.b)("h4",{id:"denominator"},Object(c.b)("inlineCode",{parentName:"h4"},"denominator")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object, index: number, array: object[]) => number\n")),Object(c.b)("p",null,"Either the key to compute the denominator over or an accessor function that maps a given item to the denominator value to compute over."),Object(c.b)("h3",{id:"usage-5"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3, value2: 4 },\n  { str: 'foo', value: 0, value2: 0 },\n  { str: 'bar', value: 0, value2: 3 },\n  { str: 'bar', value: 1, value2: 2 },\n  { str: 'bar', value: 7, value2: 10 },\n];\n\ntidy(data, summarize({\n  meanValue: meanRate('value', 'value2'),\n}))\n// output:\n[{ meanValue: 11 / 19 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"median"},"median"),Object(c.b)("p",null,"Computes the median value as per ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#median"}),"d3-array::median"),"."),Object(c.b)("h3",{id:"parameters-6"},"Parameters"),Object(c.b)("h4",{id:"key-5"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object, index: number, array: object[]) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-6"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  value: median('value'),\n})\n// output:\n[{ value: 3 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"min"},"min"),Object(c.b)("p",null,"Computes the min value as per ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#min"}),"d3-array::min"),"."),Object(c.b)("h3",{id:"parameters-7"},"Parameters"),Object(c.b)("h4",{id:"key-6"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object, index: number, array: object[]) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-7"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  value: min('value'),\n})\n// output:\n[{ value: 1 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"n"},"n"),Object(c.b)("p",null,"Computes the number of items in the collection."),Object(c.b)("h3",{id:"parameters-8"},"Parameters"),Object(c.b)("h4",{id:"options"},Object(c.b)("inlineCode",{parentName:"h4"},"options?")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"{ \n  predicate?: (item: object, index: number, items: object[]) => boolean\n}   \n")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"predicate"),": When provided, only count items that return true when passed to this function.")),Object(c.b)("h3",{id:"usage-8"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  count: n(),\n  countFoo: n({ predicate: d => d.str === 'foo' })\n})\n// output:\n[{ count: 5, countFoo: 2 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"ndistinct"},"nDistinct"),Object(c.b)("p",null,"Computes the number of distinct values for a key in the collection."),Object(c.b)("h3",{id:"parameters-9"},"Parameters"),Object(c.b)("h4",{id:"key-7"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object, index: number, array: object[]) => any\n")),Object(c.b)("p",null,"The key or function to compute the distinct values over."),Object(c.b)("h4",{id:"options-1"},Object(c.b)("inlineCode",{parentName:"h4"},"options")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"{ \n  includeNull?: boolean = true\n  includeUndefined?: boolean = false\n}\n")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"includeNull = true")," whether or not to count ",Object(c.b)("inlineCode",{parentName:"li"},"null")," as a distinct value"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"includeUndefined = false")," whether or not to count ",Object(c.b)("inlineCode",{parentName:"li"},"undefined")," as a distinct value")),Object(c.b)("h3",{id:"usage-9"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n  { str: 'bar', value: undefined },\n];\n\ntidy(data, summarize({\n  numStr: nDistinct('str'),\n})\n// output:\n[{ numStr: 2 }]\n\ntidy(data, summarize({\n  numValue: nDistinct(d => d.value),\n})\n// output:\n[{ numValue: 3 }]\n\ntidy(data, summarize({\n  numValue: nDistinct(d => d.value, { includeUndefined: true }),\n})\n// output:\n[{ numValue: 4 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"sum"},"sum"),Object(c.b)("p",null,"Computes the sum as per ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#fsum"}),"d3-array::fsum"),"."),Object(c.b)("h3",{id:"parameters-10"},"Parameters"),Object(c.b)("h4",{id:"key-8"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object, index: number, array: object[]) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h4",{id:"options-2"},Object(c.b)("inlineCode",{parentName:"h4"},"options?")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"{ \n  predicate?: (item: object, index: number, items: object[]) => boolean\n}   \n")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"predicate"),": When provided, only sum items that return true when passed to this function.")),Object(c.b)("h3",{id:"usage-10"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  value: sum('value'),\n  valueFoo: sum('value', { predicate: d => d.str === 'foo' })\n})\n// output:\n[{ value: 15, valueFoo: 4 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"variance"},"variance"),Object(c.b)("p",null,"Computes the variance as per ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#variance"}),"d3-array::variance"),"."),Object(c.b)("h3",{id:"parameters-11"},"Parameters"),Object(c.b)("h4",{id:"key-9"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object, index: number, array: object[]) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-11"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  value: variance('value'),\n})\n// output:\n[{ value: 6 }]\n")),Object(c.b)("hr",null))}o.isMDXComponent=!0},97:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return p}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function u(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?u(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):u(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=r.a.createContext({}),o=function(e){var t=r.a.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},s=function(e){var t=o(e.components);return r.a.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,u=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),s=o(a),d=n,p=s["".concat(u,".").concat(d)]||s[d]||m[d]||c;return a?r.a.createElement(p,b(b({ref:t},i),{},{components:a})):r.a.createElement(p,b({ref:t},i))}));function p(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,u=new Array(c);u[0]=d;var b={};for(var l in t)hasOwnProperty.call(t,l)&&(b[l]=t[l]);b.originalType=e,b.mdxType="string"==typeof e?e:n,u[1]=b;for(var i=2;i<c;i++)u[i]=a[i];return r.a.createElement.apply(null,u)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);